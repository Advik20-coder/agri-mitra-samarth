import { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useLanguage } from "@/contexts/LanguageContext";
import { MessageCircle, X, Send, Mic, MicOff, Upload, MapPin } from "lucide-react";
import { toast } from "sonner";

// Type declarations for Web Speech API
declare global {
  interface Window {
    SpeechRecognition: typeof SpeechRecognition;
    webkitSpeechRecognition: typeof SpeechRecognition;
  }
}

interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  start(): void;
  stop(): void;
  onstart: ((this: SpeechRecognition, ev: Event) => any) | null;
  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;
  onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;
  onend: ((this: SpeechRecognition, ev: Event) => any) | null;
}

interface SpeechRecognitionEvent extends Event {
  results: SpeechRecognitionResultList;
}

interface SpeechRecognitionResultList {
  length: number;
  [index: number]: SpeechRecognitionResult;
}

interface SpeechRecognitionResult {
  length: number;
  [index: number]: SpeechRecognitionAlternative;
}

interface SpeechRecognitionAlternative {
  transcript: string;
  confidence: number;
}

interface SpeechRecognitionErrorEvent extends Event {
  error: string;
  message: string;
}

declare const SpeechRecognition: {
  new (): SpeechRecognition;
};

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

interface LocationInfo {
  state: string;
  district: string;
  soilType: string;
  recommendedCrops: string[];
  soilDescription: string;
}

const locationData: Record<string, Record<string, LocationInfo>> = {
  punjab: {
    ludhiana: {
      state: "Punjab",
      district: "Ludhiana", 
      soilType: "Loamy Alluvial Soil",
      recommendedCrops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдордХреНрдХрд╛", "рд╕рд░рд╕реЛрдВ", "рдЖрд▓реВ"],
      soilDescription: "рдкрдВрдЬрд╛рдм рдХреА рдорд┐рдЯреНрдЯреА рдореБрдЦреНрдпрддрдГ Alluvial Soil (рдЦрд╛рджрд░ рд╡ рдмрд╛рдВрдЧрд░) рд╣реИ, рдорд┐рд╢реНрд░рд┐рдд рд▓реЛрдЯреА (loamy), рдЕрдЪреНрдЫреА рдЙрдкрдЬрд╛рдК рдорд┐рдЯреНрдЯреА рдЬреЛ рдЧреЗрд╣реВрдБ, рдзрд╛рди рдЖрджрд┐ рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╣реИред"
    },
    sangrur: {
      state: "Punjab",
      district: "Sangrur",
      soilType: "Loamy Alluvial Soil", 
      recommendedCrops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдХрдкрд╛рд╕", "рдЧрдиреНрдирд╛"],
      soilDescription: "рд╕рдВрдЧрд░реВрд░ рдЬрд┐рд▓реЗ рдХреА рдорд┐рдЯреНрдЯреА рдЙрдкрдЬрд╛рдК рдЦрд╛рджрд░ рдорд┐рдЯреНрдЯреА рд╣реИ рдЬреЛ рдХреГрд╖рд┐ рдХреЗ рд▓рд┐рдП рдЕрддреНрдпрдВрдд рдЙрдкрдпреБрдХреНрдд рд╣реИред"
    },
    bathinda: {
      state: "Punjab",
      district: "Bathinda",
      soilType: "Sandy Loam Alluvial",
      recommendedCrops: ["рдХрдкрд╛рд╕", "рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдордХреНрдХрд╛"],
      soilDescription: "рдмрдард┐рдВрдбрд╛ рдХреА рдорд┐рдЯреНрдЯреА рд░реЗрддреАрд▓реА рджреЛрдордЯ рд╣реИ рдЬреЛ рдХрдкрд╛рд╕ рдФрд░ рдЕрдирд╛рдЬ рдХреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫреА рд╣реИред"
    }
  },
  "uttar pradesh": {
    ghazipur: {
      state: "Uttar Pradesh",
      district: "Ghazipur",
      soilType: "Silt-Loam, Clay-Loam",
      recommendedCrops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдЧрдиреНрдирд╛", "рджрд▓рд╣рди", "рддрд┐рд▓рд╣рди"],
      soilDescription: "рдЧрд╛рдЬреАрдкреБрд░ рдХреА рдорд┐рдЯреНрдЯреА Silt-Loam, Loam, Clay-Loam рдкреНрд░рдХрд╛рд░ рдХреА рд╣реИ рдЬреЛ рдорд╛рдзреНрдпрдо рд░реВрдк рд╕реЗ рдЙрдкрдЬрд╛рдК рд╣реИ рдФрд░ рд╡рд┐рднрд┐рдиреНрди рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╣реИред"
    },
    prayagraj: {
      state: "Uttar Pradesh", 
      district: "Prayagraj",
      soilType: "Mixed Alluvial",
      recommendedCrops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдЕрд░рд╣рд░", "рдЪрдирд╛", "рд╕рд░рд╕реЛрдВ"],
      soilDescription: "рдкреНрд░рдпрд╛рдЧрд░рд╛рдЬ (рдЗрд▓рд╛рд╣рд╛рдмрд╛рдж) рдХреА рдорд┐рдЯреНрдЯреА рдорд┐рдХреНрд╕ рд╣реИ - рдЬрдореБрдирд╛ рдЦрдбреНрдбрд░ рд╡ alluvial, рдЧрдВрдЧрд╛ low land, рдХреБрдЫ рдХреНрд╖реЗрддреНрд░реЛрдВ рдореЗрдВ sodic рдорд┐рдЯреНрдЯреА рднреА рд╣реИред"
    }
  },
  bihar: {
    patna: {
      state: "Bihar",
      district: "Patna", 
      soilType: "Karail-Kewal Soil",
      recommendedCrops: ["рдзрд╛рди", "рдЧреЗрд╣реВрдВ", "рдордХреНрдХрд╛", "рджрд▓рд╣рди"],
      soilDescription: "рдкрдЯрдирд╛ рдХреА рдорд┐рдЯреНрдЯреА Karail-Kewal рдкреНрд░рдХрд╛рд░ рдХреА рднрд╛рд░реА рдХреНрд▓реЗ рдорд┐рдЯреНрдЯреА рд╣реИ рдЬреЛ рдзрд╛рди рдФрд░ рдЕрдиреНрдп рдЕрдирд╛рдЬ рдХреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╣реИред"
    },
    gaya: {
      state: "Bihar",
      district: "Gaya",
      soilType: "Karail-Kewal Clay",
      recommendedCrops: ["рдзрд╛рди", "рдЧреЗрд╣реВрдВ", "рджрд▓рд╣рди", "рддрд┐рд▓рд╣рди"],
      soilDescription: "рдЧрдпрд╛ рдХреА рдорд┐рдЯреНрдЯреА рднрд╛рд░реА clay рдорд┐рдЯреНрдЯреА рд╣реИ рдЬреЛ рдЬрд▓рднрд░рд╛рд╡ рд╡рд╛рд▓реЗ рдХреНрд╖реЗрддреНрд░реЛрдВ рдореЗрдВ рдкрд╛рдИ рдЬрд╛рддреА рд╣реИред"
    }
  }
};

export const FloatingChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { t } = useLanguage();
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      addBotMessage("рдирдорд╕реНрдХрд╛рд░! ЁЯМ╛ рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ рд╣реВрдВред рдЖрдк рдореБрдЭрд╕реЗ рдорд┐рдЯреНрдЯреА, рдлрд╕рд▓, рдореМрд╕рдо рдпрд╛ рдЦреЗрддреА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдк рдЕрдкрдирд╛ рд╕реНрдерд╛рди рднреА рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ рдореИрдВ рдЖрдкрдХреЛ рд╕реНрдерд╛рдиреАрдп рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХреВрдВред");
    }
  }, [isOpen]);

  const addBotMessage = (content: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'bot',
      timestamp: new Date()
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const addUserMessage = (content: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user', 
      timestamp: new Date()
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const getLocationInfo = (userMessage: string): LocationInfo | null => {
    const message = userMessage.toLowerCase();
    
    for (const [state, districts] of Object.entries(locationData)) {
      if (message.includes(state)) {
        for (const [district, info] of Object.entries(districts)) {
          if (message.includes(district)) {
            return info;
          }
        }
        // Return first district info if only state mentioned
        return Object.values(districts)[0];
      }
    }
    
    // Check for district names without state
    for (const [state, districts] of Object.entries(locationData)) {
      for (const [district, info] of Object.entries(districts)) {
        if (message.includes(district)) {
          return info;
        }
      }
    }
    
    return null;
  };

  const generateBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    // Location-based soil information
    const locationInfo = getLocationInfo(message);
    if (locationInfo) {
      return `ЁЯУН **${locationInfo.district}, ${locationInfo.state} рдХреА рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдирдХрд╛рд░реА:**

ЁЯМ▒ **рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░:** ${locationInfo.soilType}

ЁЯУЭ **рд╡рд┐рд╡рд░рдг:** ${locationInfo.soilDescription}

ЁЯМ╛ **рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╕рд▓реЗрдВ:** ${locationInfo.recommendedCrops.join(', ')}

ЁЯТб **рд╕реБрдЭрд╛рд╡:** рдЗрд╕ рдорд┐рдЯреНрдЯреА рдореЗрдВ рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдЙрдЪрд┐рдд рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдФрд░ рд╕рдВрддреБрд▓рд┐рдд рдЙрд░реНрд╡рд░рдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред`;
    }

    // Soil-related queries
    if (message.includes('рдорд┐рдЯреНрдЯреА') || message.includes('soil') || message.includes('рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдВрдЪ')) {
      return `ЁЯМ▒ **рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдирдХрд╛рд░реА:**

рдорд┐рдЯреНрдЯреА рдХреЗ рдореБрдЦреНрдп рдкреНрд░рдХрд╛рд░:
тАв **рджреЛрдордЯ рдорд┐рдЯреНрдЯреА (Loamy)** - рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдЦреЗрддреА рдХреЗ рд▓рд┐рдП
тАв **рдЪрд┐рдХрдиреА рдорд┐рдЯреНрдЯреА (Clay)** - рдкрд╛рдиреА рд░реЛрдХрдиреЗ рдореЗрдВ рдЕрдЪреНрдЫреА
тАв **рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА (Sandy)** - рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдЕрдЪреНрдЫреА

рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдмрддрд╛рдПрдВ рддрд╛рдХрд┐ рдореИрдВ рдЖрдкрдХреЛ рд╕реНрдерд╛рдиреАрдп рдорд┐рдЯреНрдЯреА рдХреА рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХреВрдВред`;
    }

    // Crop-related queries
    if (message.includes('рдлрд╕рд▓') || message.includes('crop') || message.includes('рдЦреЗрддреА')) {
      return `ЁЯМ╛ **рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ:**

**рд░рдмреА рдлрд╕рд▓реЗрдВ (рдЕрдХреНрдЯреВрдмрд░-рдорд╛рд░реНрдЪ):**
тАв рдЧреЗрд╣реВрдВ, рдЬреМ, рдЪрдирд╛, рдорд╕реВрд░, рд╕рд░рд╕реЛрдВ

**рдЦрд░реАрдл рдлрд╕рд▓реЗрдВ (рдЬреВрди-рд╕рд┐рддрдореНрдмрд░):**  
тАв рдзрд╛рди, рдордХреНрдХрд╛, рдЬреНрд╡рд╛рд░, рдмрд╛рдЬрд░рд╛, рдХрдкрд╛рд╕

**рдЬрд╛рдпрдж рдлрд╕рд▓реЗрдВ (рдорд╛рд░реНрдЪ-рдЬреВрди):**
тАв рддрд░рдмреВрдЬ, рдЦрд░рдмреВрдЬрд╛, рдЦреАрд░рд╛, рд▓реМрдХреА

рдЖрдкрдХреА рдорд┐рдЯреНрдЯреА рдФрд░ рдХреНрд╖реЗрддреНрд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╕рдЯреАрдХ рд╕реБрдЭрд╛рд╡ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдмрддрд╛рдПрдВред`;
    }

    // Weather-related queries
    if (message.includes('рдореМрд╕рдо') || message.includes('weather') || message.includes('рдмрд╛рд░рд┐рд╢')) {
      return `ЁЯМдя╕П **рдореМрд╕рдо рдФрд░ рдЦреЗрддреА:**

**рдорд╛рдирд╕реВрди рд╕реЗ рдкрд╣рд▓реЗ:**
тАв рдмреАрдЬ рдФрд░ рдЙрд░реНрд╡рд░рдХ рдХреА рддреИрдпрд╛рд░реА рдХрд░реЗрдВ
тАв рдЦреЗрдд рдХреА рдЬреБрддрд╛рдИ рдФрд░ рддреИрдпрд╛рд░реА рдХрд░реЗрдВ

**рдорд╛рдирд╕реВрди рдХреЗ рджреМрд░рд╛рди:**
тАв рдзрд╛рди, рдордХреНрдХрд╛, рдЬреНрд╡рд╛рд░ рдХреА рдмреБрдЖрдИ
тАв рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдХрд╛ рдкреНрд░рдмрдВрдз рдХрд░реЗрдВ

**рд╕рд░реНрджреА рдореЗрдВ:**
тАв рдЧреЗрд╣реВрдВ, рдЪрдирд╛, рд╕рд░рд╕реЛрдВ рдХреА рдлрд╕рд▓
тАв рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛ рдЙрдЪрд┐рдд рдкреНрд░рдмрдВрдз

рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо рдХреА рд╕реНрдерд┐рддрд┐ рдХреЗ рд▓рд┐рдП рдореМрд╕рдо рд╡рд┐рднрд╛рдЧ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВред`;
    }

    // Fertilizer queries
    if (message.includes('рдЦрд╛рдж') || message.includes('рдЙрд░реНрд╡рд░рдХ') || message.includes('fertilizer')) {
      return `ЁЯзк **рдЙрд░реНрд╡рд░рдХ рдХреА рдЬрд╛рдирдХрд╛рд░реА:**

**рдореБрдЦреНрдп рдЙрд░реНрд╡рд░рдХ:**
тАв **рдпреВрд░рд┐рдпрд╛ (N)** - рдкрддреНрддрд┐рдпреЛрдВ рдХреА рд╡реГрджреНрдзрд┐ рдХреЗ рд▓рд┐рдП
тАв **DAP (P)** - рдЬрдбрд╝реЛрдВ рдХреА рдордЬрдмреВрддреА рдХреЗ рд▓рд┐рдП  
тАв **MOP (K)** - рдлрд▓-рдлреВрд▓ рдХреЗ рд▓рд┐рдП

**рдЬреИрд╡рд┐рдХ рдЦрд╛рдж:**
тАв рдЧреЛрдмрд░ рдХреА рдЦрд╛рдж, рдХрдореНрдкреЛрд╕реНрдЯ
тАв рд╣рд░реА рдЦрд╛рдж, рдХреЗрдВрдЪреБрдЖ рдЦрд╛рдж

**рдЙрдкрдпреЛрдЧ:** рдорд┐рдЯреНрдЯреА рдЬрд╛рдВрдЪ рдХреЗ рдмрд╛рдж рд╣реА рдЙрд░реНрд╡рд░рдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред`;
    }

    // Pest/disease queries
    if (message.includes('рдХреАрдЯ') || message.includes('рд░реЛрдЧ') || message.includes('pest') || message.includes('disease')) {
      return `ЁЯРЫ **рдХреАрдЯ рдФрд░ рд░реЛрдЧ рдкреНрд░рдмрдВрдзрди:**

**рдореБрдЦреНрдп рдХреАрдЯ:**
тАв рдПрдлрд┐рдб, рдорд╛рдИрдЯ, рдХреИрдЯрд░рдкрд┐рд▓рд░
тАв рд╕рдлреЗрдж рдордХреНрдЦреА, рдереНрд░рд┐рдкреНрд╕

**рд░реЛрдЧ:**
тАв рдлрдВрдЧрд▓ рд░реЛрдЧ, рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд░реЛрдЧ
тАв рд╡рд╛рдпрд░рд▓ рд░реЛрдЧ

**рдкреНрд░рд╛рдХреГрддрд┐рдХ рдирд┐рдпрдВрддреНрд░рдг:**
тАв рдиреАрдо рдХрд╛ рддреЗрд▓, рд╕рд╛рдмреБрди рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡
тАв рдЬреИрд╡рд┐рдХ рдХреАрдЯрдирд╛рд╢рдХ рдХрд╛ рдЙрдкрдпреЛрдЧ

ЁЯУ╕ рдЖрдк рдлрд╕рд▓ рдХреА рддрд╕реНрд╡реАрд░ рднреА рдЕрдкрд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдкрд╣рдЪрд╛рди рдХреЗ рд▓рд┐рдПред`;
    }

    // Market price queries  
    if (message.includes('рднрд╛рд╡') || message.includes('рдХреАрдордд') || message.includes('price') || message.includes('market')) {
      return `ЁЯТ░ **рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдХреА рдЬрд╛рдирдХрд╛рд░реА:**

**рд╡рд░реНрддрдорд╛рди рджрд░реЗрдВ (рдЕрдиреБрдорд╛рдирд┐рдд):**
тАв рдЧреЗрд╣реВрдВ: тВ╣2000-2200/рдХреНрд╡рд┐рдВрдЯрд▓
тАв рдзрд╛рди: тВ╣1800-2000/рдХреНрд╡рд┐рдВрдЯрд▓
тАв рдЪрдирд╛: тВ╣4500-5000/рдХреНрд╡рд┐рдВрдЯрд▓
тАв рд╕рд░рд╕реЛрдВ: тВ╣4000-4500/рдХреНрд╡рд┐рдВрдЯрд▓

**рд╕реБрдЭрд╛рд╡:**
тАв рд╕реНрдерд╛рдиреАрдп рдордВрдбреА рдХреА рджрд░реЗрдВ рдЬрд╛рдВрдЪреЗрдВ
тАв рдиреНрдпреВрдирддрдо рд╕рдорд░реНрдерди рдореВрд▓реНрдп (MSP) рджреЗрдЦреЗрдВ
тАв рдмрд┐рдХреНрд░реА рдХрд╛ рд╕рд╣реА рд╕рдордп рдЪреБрдиреЗрдВ

ЁЯУ▒ eNAM рдРрдк рд╕реЗ рдирд╡реАрдирддрдо рднрд╛рд╡ рджреЗрдЦреЗрдВред`;
    }

    // Default response
    return `ЁЯдЦ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ! рдЖрдк рдореБрдЭрд╕реЗ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:

тАв ЁЯМ▒ рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдирдХрд╛рд░реА (рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдмрддрд╛рдПрдВ)
тАв ЁЯМ╛ рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ
тАв ЁЯМдя╕П рдореМрд╕рдо рдФрд░ рдЦреЗрддреА
тАв ЁЯзк рдЙрд░реНрд╡рд░рдХ рдФрд░ рдЦрд╛рдж
тАв ЁЯРЫ рдХреАрдЯ-рд░реЛрдЧ рдирд┐рдпрдВрддреНрд░рдг
тАв ЁЯТ░ рдмрд╛рдЬрд╛рд░ рдХреА рдХреАрдорддреЗрдВ

рдХреБрдЫ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?`;
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage = inputValue.trim();
    setInputValue('');
    addUserMessage(userMessage);
    setIsLoading(true);

    // Simulate bot thinking time
    setTimeout(() => {
      const botResponse = generateBotResponse(userMessage);
      addBotMessage(botResponse);
      setIsLoading(false);
    }, 1000);
  };

  const handleVoiceInput = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      toast.error("рдЖрдкрдХрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╡реЙрдпрд╕ рдЗрдирдкреБрдЯ рд╕рдкреЛрд░реНрдЯ рдирд╣реАрдВ рдХрд░рддрд╛");
      return;
    }

    if (isListening) {
      recognitionRef.current?.stop();
      setIsListening(false);
      return;
    }

    const SpeechRecognitionConstructor = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognitionConstructor();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'hi-IN';

    recognition.onstart = () => {
      setIsListening(true);
      toast.success("рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ... рдмреЛрд▓реЗрдВ");
    };

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setInputValue(transcript);
      setIsListening(false);
    };

    recognition.onerror = () => {
      setIsListening(false);
      toast.error("рд╡реЙрдпрд╕ рдЗрдирдкреБрдЯ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ");
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognitionRef.current = recognition;
    recognition.start();
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      toast.error("рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рдЫрд╡рд┐ рдлрд╝рд╛рдЗрд▓ рдЪреБрдиреЗрдВ");
      return;
    }

    addUserMessage(`ЁЯУ╕ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ: ${file.name}`);
    
    // Simulate image analysis
    setTimeout(() => {
      addBotMessage(`ЁЯУ╕ **рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо:**

рдореИрдВрдиреЗ рдЖрдкрдХреА рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд┐рдпрд╛ рд╣реИред рдпрд╣ рд╕реБрд╡рд┐рдзрд╛ рдЕрднреА рд╡рд┐рдХрд╛рд╕ рдХреЗ рдЪрд░рдг рдореЗрдВ рд╣реИред

**рд╕рд╛рдорд╛рдиреНрдп рд╕реБрдЭрд╛рд╡:**
тАв рдпрджрд┐ рдпрд╣ рдХреАрдЯ/рд░реЛрдЧ рдХреА рдЫрд╡рд┐ рд╣реИ, рддреЛ рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ
тАв рдпрджрд┐ рдпрд╣ рдлрд╕рд▓ рдХреА рдЫрд╡рд┐ рд╣реИ, рддреЛ рдЗрд╕рдХреА рд╡рд░реНрддрдорд╛рди рдЕрд╡рд╕реНрдерд╛ рдмрддрд╛рдПрдВ
тАв рдЕрдзрд┐рдХ рд╕рдЯреАрдХ рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЫрд╡рд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ

ЁЯФм рдЬрд▓реНрдж рд╣реА рд╣рдо AI-powered рдЫрд╡рд┐ рдкрд╣рдЪрд╛рди рд▓реЗрдХрд░ рдЖрдПрдВрдЧреЗ!`);
    }, 2000);
  };

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 h-14 w-14 rounded-full bg-gradient-primary shadow-agricultural hover:shadow-lg transition-all duration-300 z-50 group"
        size="icon"
      >
        <MessageCircle className="h-6 w-6 text-primary-foreground group-hover:scale-110 transition-transform" />
      </Button>
    );
  }

  return (
    <Card className="fixed bottom-6 right-6 w-96 h-[600px] shadow-agricultural z-50 bg-card/95 backdrop-blur-md border-border/60">
      <CardHeader className="flex flex-row items-center justify-between p-4 bg-gradient-primary text-primary-foreground rounded-t-lg">
        <CardTitle className="text-lg font-semibold flex items-center gap-2">
          <MessageCircle className="h-5 w-5" />
          {t.chatWithAI}
        </CardTitle>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setIsOpen(false)}
          className="h-8 w-8 text-primary-foreground hover:bg-white/20"
        >
          <X className="h-4 w-4" />
        </Button>
      </CardHeader>
      
      <CardContent className="p-0 flex flex-col h-[calc(100%-80px)]">
        <ScrollArea className="flex-1 p-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg whitespace-pre-wrap ${
                    message.sender === 'user'
                      ? 'bg-gradient-primary text-primary-foreground'
                      : 'bg-secondary text-secondary-foreground'
                  }`}
                >
                  {message.content}
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-secondary text-secondary-foreground p-3 rounded-lg">
                  <div className="flex space-x-2">
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>

        <div className="p-4 border-t bg-card/50 backdrop-blur-sm">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder={t.typeMessage}
              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
              className="flex-1"
              disabled={isLoading}
            />
            
            <Button
              variant="outline"
              size="icon"
              onClick={handleVoiceInput}
              className={`transition-colors ${isListening ? 'bg-destructive text-destructive-foreground' : ''}`}
              disabled={isLoading}
            >
              {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
            </Button>
            
            <Button
              variant="outline"
              size="icon"
              onClick={() => fileInputRef.current?.click()}
              disabled={isLoading}
            >
              <Upload className="h-4 w-4" />
            </Button>
            
            <Button
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isLoading}
              className="bg-gradient-primary"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
          
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            className="hidden"
          />
        </div>
      </CardContent>
    </Card>
  );
};