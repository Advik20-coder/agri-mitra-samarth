import { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useLanguage } from "@/contexts/LanguageContext";
import { MessageCircle, X, Send, Mic, MicOff, Upload, MapPin, Languages } from "lucide-react";
import { toast } from "sonner";

// Type declarations for Web Speech API
declare global {
  interface Window {
    SpeechRecognition: typeof SpeechRecognition;
    webkitSpeechRecognition: typeof SpeechRecognition;
  }
}

interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  start(): void;
  stop(): void;
  onstart: ((this: SpeechRecognition, ev: Event) => any) | null;
  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;
  onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;
  onend: ((this: SpeechRecognition, ev: Event) => any) | null;
}

interface SpeechRecognitionEvent extends Event {
  results: SpeechRecognitionResultList;
}

interface SpeechRecognitionResultList {
  length: number;
  [index: number]: SpeechRecognitionResult;
}

interface SpeechRecognitionResult {
  length: number;
  [index: number]: SpeechRecognitionAlternative;
}

interface SpeechRecognitionAlternative {
  transcript: string;
  confidence: number;
}

interface SpeechRecognitionErrorEvent extends Event {
  error: string;
  message: string;
}

declare const SpeechRecognition: {
  new (): SpeechRecognition;
};

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

interface LocationInfo {
  state: string;
  district: string;
  soilType: string;
  recommendedCrops: string[];
  soilDescription: string;
}

const locationData: Record<string, Record<string, LocationInfo>> = {
  punjab: {
    ludhiana: {
      state: "Punjab",
      district: "Ludhiana", 
      soilType: "Loamy Alluvial Soil",
      recommendedCrops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§∏‡§∞‡§∏‡•ã‡§Ç", "‡§Ü‡§≤‡•Ç"],
      soilDescription: "‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§§‡§É Alluvial Soil (‡§ñ‡§æ‡§¶‡§∞ ‡§µ ‡§¨‡§æ‡§Ç‡§ó‡§∞) ‡§π‡•à, ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§ø‡§§ ‡§≤‡•ã‡§ü‡•Ä (loamy), ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§â‡§™‡§ú‡§æ‡§ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ú‡•ã ‡§ó‡•á‡§π‡•Ç‡§Å, ‡§ß‡§æ‡§® ‡§Ü‡§¶‡§ø ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡•§"
    },
    sangrur: {
      state: "Punjab",
      district: "Sangrur",
      soilType: "Loamy Alluvial Soil", 
      recommendedCrops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§ï‡§™‡§æ‡§∏", "‡§ó‡§®‡•ç‡§®‡§æ"],
      soilDescription: "‡§∏‡§Ç‡§ó‡§∞‡•Ç‡§∞ ‡§ú‡§ø‡§≤‡•á ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§â‡§™‡§ú‡§æ‡§ä ‡§ñ‡§æ‡§¶‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§ï‡•É‡§∑‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§§‡•ç‡§Ø‡§Ç‡§§ ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡•§"
    },
    bathinda: {
      state: "Punjab",
      district: "Bathinda",
      soilType: "Sandy Loam Alluvial",
      recommendedCrops: ["‡§ï‡§™‡§æ‡§∏", "‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§Æ‡§ï‡•ç‡§ï‡§æ"],
      soilDescription: "‡§¨‡§†‡§ø‡§Ç‡§°‡§æ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∞‡•á‡§§‡•Ä‡§≤‡•Ä ‡§¶‡•ã‡§Æ‡§ü ‡§π‡•à ‡§ú‡•ã ‡§ï‡§™‡§æ‡§∏ ‡§î‡§∞ ‡§Ö‡§®‡§æ‡§ú ‡§ï‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•à‡•§"
    }
  },
  "uttar pradesh": {
    ghazipur: {
      state: "Uttar Pradesh",
      district: "Ghazipur",
      soilType: "Silt-Loam, Clay-Loam",
      recommendedCrops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§ó‡§®‡•ç‡§®‡§æ", "‡§¶‡§≤‡§π‡§®", "‡§§‡§ø‡§≤‡§π‡§®"],
      soilDescription: "‡§ó‡§æ‡§ú‡•Ä‡§™‡•Å‡§∞ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä Silt-Loam, Loam, Clay-Loam ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§â‡§™‡§ú‡§æ‡§ä ‡§π‡•à ‡§î‡§∞ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡•§"
    },
    prayagraj: {
      state: "Uttar Pradesh", 
      district: "Prayagraj",
      soilType: "Mixed Alluvial",
      recommendedCrops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§Ö‡§∞‡§π‡§∞", "‡§ö‡§®‡§æ", "‡§∏‡§∞‡§∏‡•ã‡§Ç"],
      soilDescription: "‡§™‡•ç‡§∞‡§Ø‡§æ‡§ó‡§∞‡§æ‡§ú (‡§á‡§≤‡§æ‡§π‡§æ‡§¨‡§æ‡§¶) ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡§ø‡§ï‡•ç‡§∏ ‡§π‡•à - ‡§ú‡§Æ‡•Å‡§®‡§æ ‡§ñ‡§°‡•ç‡§°‡§∞ ‡§µ alluvial, ‡§ó‡§Ç‡§ó‡§æ low land, ‡§ï‡•Å‡§õ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç sodic ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§≠‡•Ä ‡§π‡•à‡•§"
    }
  },
  bihar: {
    patna: {
      state: "Bihar",
      district: "Patna", 
      soilType: "Karail-Kewal Soil",
      recommendedCrops: ["‡§ß‡§æ‡§®", "‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§¶‡§≤‡§π‡§®"],
      soilDescription: "‡§™‡§ü‡§®‡§æ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä Karail-Kewal ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§≠‡§æ‡§∞‡•Ä ‡§ï‡•ç‡§≤‡•á ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§ß‡§æ‡§® ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§Ö‡§®‡§æ‡§ú ‡§ï‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡•§"
    },
    gaya: {
      state: "Bihar",
      district: "Gaya",
      soilType: "Karail-Kewal Clay",
      recommendedCrops: ["‡§ß‡§æ‡§®", "‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§¶‡§≤‡§π‡§®", "‡§§‡§ø‡§≤‡§π‡§®"],
      soilDescription: "‡§ó‡§Ø‡§æ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§≠‡§æ‡§∞‡•Ä clay ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§ú‡§≤‡§≠‡§∞‡§æ‡§µ ‡§µ‡§æ‡§≤‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§à ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§"
    }
  }
};

export const FloatingChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [chatLanguage, setChatLanguage] = useState('hi');
  const { t } = useLanguage();
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessages = {
        hi: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! üåæ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä, ‡§´‡§∏‡§≤, ‡§Æ‡•å‡§∏‡§Æ ‡§Ø‡§æ ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§≠‡•Ä ‡§¨‡§§‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡•Ç‡§Ç‡•§",
        en: "Hello! üåæ I'm your agriculture advisor. You can ask me anything about soil, crops, weather, or farming. You can also tell me your location so I can provide local soil information.",
        pa: "‡®∏‡®§ ‡®∏‡©ç‡®∞‡©Ä ‡®Ö‡®ï‡®æ‡®≤! üåæ ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®∏‡®≤‡®æ‡®π‡®ï‡®æ‡®∞ ‡®π‡®æ‡®Ç‡•§ ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Æ‡®ø‡©±‡®ü‡©Ä, ‡®´‡®∏‡®≤‡®æ‡®Ç, ‡®Æ‡©å‡®∏‡®Æ ‡®ú‡®æ‡®Ç ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®¨‡®æ‡®∞‡©á ‡®ï‡©Å‡®ù ‡®µ‡©Ä ‡®™‡©Å‡©±‡®õ ‡®∏‡®ï‡®¶‡©á ‡®π‡©ã‡•§ ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Ü‡®™‡®£‡®æ ‡®∏‡®•‡®æ‡®® ‡®µ‡©Ä ‡®¶‡©±‡®∏ ‡®∏‡®ï‡®¶‡©á ‡®π‡©ã ‡®§‡®æ‡®Ç ‡®ú‡©ã ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®®‡©Ç‡©∞ ‡®∏‡®•‡®æ‡®®‡®ï ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®¶‡©á ‡®∏‡®ï‡®æ‡®Ç‡•§"
      };
      addBotMessage(welcomeMessages[chatLanguage as keyof typeof welcomeMessages]);
    }
  }, [isOpen, chatLanguage]);

  const addBotMessage = (content: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'bot',
      timestamp: new Date()
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const addUserMessage = (content: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user', 
      timestamp: new Date()
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const getLocationInfo = (userMessage: string): LocationInfo | null => {
    const message = userMessage.toLowerCase();
    
    for (const [state, districts] of Object.entries(locationData)) {
      if (message.includes(state)) {
        for (const [district, info] of Object.entries(districts)) {
          if (message.includes(district)) {
            return info;
          }
        }
        // Return first district info if only state mentioned
        return Object.values(districts)[0];
      }
    }
    
    // Check for district names without state
    for (const [state, districts] of Object.entries(locationData)) {
      for (const [district, info] of Object.entries(districts)) {
        if (message.includes(district)) {
          return info;
        }
      }
    }
    
    return null;
  };

  const generateBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    const responses = {
      hi: {
        schemes: {
          punjab: "‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç:\n‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§µ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§´‡§Ç‡§° (AIF)\n‚Ä¢ ‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§à-‡§Æ‡§Ç‡§°‡•Ä/‡§à-NAM\n‚Ä¢ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§° ‡§Ø‡•ã‡§ú‡§®‡§æ\n‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§ó‡•É‡§π ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ",
          bihar: "‡§¨‡§ø‡§π‡§æ‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç:\n‚Ä¢ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä (‚Çπ140 ‡§ï‡§∞‡•ã‡§°‡§º)\n‚Ä¢ ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§® ‡§¨‡•Ä‡§ú (‚Çπ4,000/‡§è‡§ï‡§°‡§º)\n‚Ä¢ ‡§∏‡§¨‡•ç‡§ú‡•Ä ‡§µ‡§ø‡§ï‡§æ‡§∏ (75% ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä)\n‚Ä¢ ‡§™‡•â‡§≤‡•Ä ‡§π‡§æ‡§â‡§∏ ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä (50%)",
          general: "‡§™‡§Ç‡§ú‡§æ‡§¨, ‡§Ø‡•Ç‡§™‡•Ä, ‡§¨‡§ø‡§π‡§æ‡§∞ ‡§î‡§∞ ‡§è‡§Æ‡§™‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
        },
        subsidy: "üèõÔ∏è **‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç (2025 ‡§Ö‡§™‡§°‡•á‡§ü):**\n\n**‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç:**\n‚Ä¢ PM-KISAN: ‚Çπ6,000/‡§µ‡§∞‡•ç‡§∑ (‡§§‡•Ä‡§® ‡§ï‡§ø‡§∏‡•ç‡§§‡•ã‡§Ç ‡§Æ‡•á‡§Ç)\n‚Ä¢ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§°: ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ú‡§æ‡§Ç‡§ö\n‚Ä¢ ‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ: ‡§ï‡§Æ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§™‡§∞ ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ\n‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§Ø‡§Ç‡§§‡•ç‡§∞‡•Ä‡§ï‡§∞‡§£: 50-80% ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§Ø‡§Ç‡§§‡•ç‡§∞‡•ã‡§Ç ‡§™‡§∞\n‚Ä¢ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§°: 4% ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞ ‡§™‡§∞ ‡§≤‡•ã‡§®\n\n**‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç:**\n‚Ä¢ ‡§™‡§Ç‡§ú‡§æ‡§¨: ‡§ï‡•É‡§∑‡§ø ‡§Ö‡§µ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§´‡§Ç‡§° (3% ‡§¨‡•ç‡§Ø‡§æ‡§ú)\n‚Ä¢ ‡§Ø‡•Ç‡§™‡•Ä: ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§¨‡•Ä‡§ú ‡§µ‡§ø‡§§‡§∞‡§£ (‚Çπ4,000/‡§è‡§ï‡§°‡§º)\n‚Ä¢ ‡§¨‡§ø‡§π‡§æ‡§∞: ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä (75% ‡§§‡§ï)\n‚Ä¢ MP: ‡§≠‡§æ‡§µ‡§æ‡§Ç‡§§‡§∞ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ\n\nüìã **‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ:** PM-KISAN ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§Ø‡§æ ‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä CSC ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç‡•§",
        insurance: "üõ°Ô∏è **‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ (2025):**\n\n**‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ (PMFBY):**\n‚Ä¢ ‡§ñ‡§∞‡•Ä‡§´: ‡§ï‡•á‡§µ‡§≤ 2% ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ\n‚Ä¢ ‡§∞‡§¨‡•Ä: ‡§ï‡•á‡§µ‡§≤ 1.5% ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ\n‚Ä¢ ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï/‡§¨‡§æ‡§ó‡§µ‡§æ‡§®‡•Ä: ‡§ï‡•á‡§µ‡§≤ 5% ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ\n\n**‡§ï‡§µ‡§∞‡•á‡§ú:**\n‚Ä¢ ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§Ü‡§™‡§¶‡§æ ‡§∏‡•á ‡§®‡•Å‡§ï‡§∏‡§æ‡§®\n‚Ä¢ ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§∏‡•á ‡§π‡§æ‡§®‡§ø\n‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§Æ‡§æ‡§∞\n‚Ä¢ ‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§®‡•Å‡§ï‡§∏‡§æ‡§® (14 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§§‡§ï)\n\n**‡§ï‡•ç‡§≤‡•á‡§Æ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ:**\n‚Ä¢ 72 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§¶‡•á‡§Ç (‡§ü‡•ã‡§≤ ‡§´‡•ç‡§∞‡•Ä: 14447)\n‚Ä¢ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§ê‡§™ 'Crop Insurance' ‡§∏‡•á ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§ï‡§æ ‡§∏‡§∞‡•ç‡§µ‡•á ‡§π‡•ã‡§ó‡§æ\n‚Ä¢ 60 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§≠‡•Å‡§ó‡§§‡§æ‡§®\n\nüì± **‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§Ü‡§µ‡•á‡§¶‡§®:** pmfby.gov.in ‡§™‡§∞ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
        soil: "üå± **‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:**\n\n‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:\n‚Ä¢ **‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä (Loamy)** - ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è\n‚Ä¢ **‡§ö‡§ø‡§ï‡§®‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä (Clay)** - ‡§™‡§æ‡§®‡•Ä ‡§∞‡•ã‡§ï‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡•Ä\n‚Ä¢ **‡§∞‡•á‡§§‡•Ä‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä (Sandy)** - ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§¨‡§§‡§æ‡§è‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡•Ç‡§Ç‡•§",
        crops: "üåæ **‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç:**\n\n**‡§∞‡§¨‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç (‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞-‡§Æ‡§æ‡§∞‡•ç‡§ö):**\n‚Ä¢ ‡§ó‡•á‡§π‡•Ç‡§Ç, ‡§ú‡•å, ‡§ö‡§®‡§æ, ‡§Æ‡§∏‡•Ç‡§∞, ‡§∏‡§∞‡§∏‡•ã‡§Ç\n\n**‡§ñ‡§∞‡•Ä‡§´ ‡§´‡§∏‡§≤‡•á‡§Ç (‡§ú‡•Ç‡§®-‡§∏‡§ø‡§§‡§Æ‡•ç‡§¨‡§∞):**\n‚Ä¢ ‡§ß‡§æ‡§®, ‡§Æ‡§ï‡•ç‡§ï‡§æ, ‡§ú‡•ç‡§µ‡§æ‡§∞, ‡§¨‡§æ‡§ú‡§∞‡§æ, ‡§ï‡§™‡§æ‡§∏\n\n**‡§ú‡§æ‡§Ø‡§¶ ‡§´‡§∏‡§≤‡•á‡§Ç (‡§Æ‡§æ‡§∞‡•ç‡§ö-‡§ú‡•Ç‡§®):**\n‚Ä¢ ‡§§‡§∞‡§¨‡•Ç‡§ú, ‡§ñ‡§∞‡§¨‡•Ç‡§ú‡§æ, ‡§ñ‡•Ä‡§∞‡§æ, ‡§≤‡•å‡§ï‡•Ä\n\n‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§ü‡•Ä‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
        default: "ü§ñ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç! ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\n\n‚Ä¢ üå± ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä\n‚Ä¢ üåæ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç\n‚Ä¢ üå§Ô∏è ‡§Æ‡•å‡§∏‡§Æ ‡§î‡§∞ ‡§ñ‡•á‡§§‡•Ä\n‚Ä¢ üß™ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§î‡§∞ ‡§ñ‡§æ‡§¶\n‚Ä¢ üêõ ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£\n‚Ä¢ üí∞ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç\n‚Ä¢ üèõÔ∏è ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç\n‚Ä¢ üõ°Ô∏è ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ\n\n‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
      },
      en: {
        schemes: {
          punjab: "Punjab Government Schemes:\n‚Ä¢ Agriculture Infrastructure Fund (AIF)\n‚Ä¢ Punjab e-Mandi/e-NAM\n‚Ä¢ Soil Health Card Scheme\n‚Ä¢ Agriculture House Assistance Scheme",
          bihar: "Bihar Government Schemes:\n‚Ä¢ Irrigation Subsidy (‚Çπ140 crore)\n‚Ä¢ Free Soybean Seeds (‚Çπ4,000/acre)\n‚Ä¢ Vegetable Development (75% subsidy)\n‚Ä¢ Polyhouse Subsidy (50%)",
          general: "Government schemes available for Punjab, UP, Bihar, and MP. Please specify your state."
        },
        subsidy: "üèõÔ∏è **Government Subsidy Schemes (2025 Update):**\n\n**Central Government Key Schemes:**\n‚Ä¢ PM-KISAN: ‚Çπ6,000/year (in three installments)\n‚Ä¢ Soil Health Card: Free soil testing\n‚Ä¢ PM Crop Insurance: Low premium crop insurance\n‚Ä¢ Agricultural Mechanization: 50-80% subsidy on farm equipment\n‚Ä¢ Kisan Credit Card: 4% interest rate loans\n\n**State Specific Schemes:**\n‚Ä¢ Punjab: Agriculture Infrastructure Fund (3% interest)\n‚Ä¢ UP: Free seed distribution (‚Çπ4,000/acre)\n‚Ä¢ Bihar: Irrigation subsidy (up to 75%)\n‚Ä¢ MP: Price difference payment scheme\n\nüìã **Application Process:** Visit PM-KISAN portal or nearest CSC center.",
        insurance: "üõ°Ô∏è **Crop Insurance Scheme (2025):**\n\n**Pradhan Mantri Fasal Bima Yojana (PMFBY):**\n‚Ä¢ Kharif: Only 2% premium\n‚Ä¢ Rabi: Only 1.5% premium\n‚Ä¢ Annual/Horticulture: Only 5% premium\n\n**Coverage:**\n‚Ä¢ Natural disaster damage\n‚Ä¢ Pest and disease losses\n‚Ä¢ Weather damage\n‚Ä¢ Post-harvest losses (up to 14 days)\n\n**Claim Process:**\n‚Ä¢ Report within 72 hours (Toll Free: 14447)\n‚Ä¢ Report via 'Crop Insurance' mobile app\n‚Ä¢ Survey will be conducted\n‚Ä¢ Payment within 60 days\n\nüì± **Quick Application:** Apply online at pmfby.gov.in",
        soil: "üå± **Soil Information:**\n\nMain Soil Types:\n‚Ä¢ **Loamy Soil** - Best for farming\n‚Ä¢ **Clay Soil** - Good water retention\n‚Ä¢ **Sandy Soil** - Good drainage\n\nPlease tell me your location so I can provide detailed local soil information.",
        crops: "üåæ **Crop Recommendations:**\n\n**Rabi Crops (Oct-Mar):**\n‚Ä¢ Wheat, Barley, Gram, Lentil, Mustard\n\n**Kharif Crops (Jun-Sep):**\n‚Ä¢ Rice, Maize, Jowar, Bajra, Cotton\n\n**Zaid Crops (Mar-Jun):**\n‚Ä¢ Watermelon, Muskmelon, Cucumber, Bottle gourd\n\nFor precise suggestions based on your soil and region, please tell me your location.",
        default: "ü§ñ I'm here to help you! You can ask me about:\n\n‚Ä¢ üå± Soil information\n‚Ä¢ üåæ Crop recommendations\n‚Ä¢ üå§Ô∏è Weather and farming\n‚Ä¢ üß™ Fertilizers and manure\n‚Ä¢ üêõ Pest and disease control\n‚Ä¢ üí∞ Market prices\n‚Ä¢ üèõÔ∏è Government schemes\n‚Ä¢ üõ°Ô∏è Crop insurance\n\nWhat would you like to know?"
      },
      pa: {
        schemes: {
          punjab: "‡®™‡©∞‡®ú‡®æ‡®¨ ‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç:\n‚Ä¢ ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®¢‡®æ‡®Ç‡®ö‡®æ ‡®´‡©∞‡®° (AIF)\n‚Ä¢ ‡®™‡©∞‡®ú‡®æ‡®¨ ‡®à-‡®Æ‡©∞‡®°‡©Ä/‡®à-NAM\n‚Ä¢ ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®∏‡®ø‡®π‡®§ ‡®ï‡®æ‡®∞‡®° ‡®Ø‡©ã‡®ú‡®®‡®æ\n‚Ä¢ ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®ò‡®∞ ‡®∏‡®π‡®æ‡®á‡®§‡®æ ‡®Ø‡©ã‡®ú‡®®‡®æ",
          bihar: "‡®¨‡®ø‡®π‡®æ‡®∞ ‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç:\n‚Ä¢ ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à ‡®∏‡®¨‡®∏‡®ø‡®°‡©Ä (‚Çπ140 ‡®ï‡®∞‡©ã‡©ú)\n‚Ä¢ ‡®Æ‡©Å‡®´‡®§ ‡®∏‡©ã‡®á‡®Ü‡®¨‡©Ä‡®® ‡®¨‡©Ä‡®ú (‚Çπ4,000/‡®è‡®ï‡©ú)\n‚Ä¢ ‡®∏‡®¨‡®ú‡®º‡©Ä ‡®µ‡®ø‡®ï‡®æ‡®∏ (75% ‡®∏‡®¨‡®∏‡®ø‡®°‡©Ä)\n‚Ä¢ ‡®™‡©å‡®≤‡©Ä‡®π‡®æ‡®ä‡®∏ ‡®∏‡®¨‡®∏‡®ø‡®°‡©Ä (50%)",
          general: "‡®™‡©∞‡®ú‡®æ‡®¨, ‡®Ø‡©Ç‡®™‡©Ä, ‡®¨‡®ø‡®π‡®æ‡®∞ ‡®Ö‡®§‡©á ‡®ê‡®Æ‡®™‡©Ä ‡®≤‡®à ‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç ‡®â‡®™‡®≤‡®¨‡®ß ‡®π‡®®‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®Ü‡®™‡®£‡®æ ‡®∞‡®æ‡®ú ‡®¶‡©±‡®∏‡©ã‡•§"
        },
        subsidy: "üèõÔ∏è **‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®∏‡®¨‡®∏‡®ø‡®°‡©Ä ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç (2025 ‡®Ö‡®™‡®°‡©á‡®ü):**\n\n**‡®ï‡©á‡®Ç‡®¶‡®∞ ‡®∏‡®∞‡®ï‡®æ‡®∞ ‡®¶‡©Ä‡®Ü‡®Ç ‡®Æ‡©Å‡©±‡®ñ ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç:**\n‚Ä¢ PM-KISAN: ‡®∏‡®æ‡®≤ ‡®µ‡®ø‡©±‡®ö ‚Çπ6,000 (‡®§‡®ø‡©∞‡®® ‡®ï‡®ø‡®∏‡®º‡®§‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö)\n‚Ä¢ ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®∏‡®ø‡®π‡®§ ‡®ï‡®æ‡®∞‡®°: ‡®Æ‡©Å‡®´‡®§ ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®ú‡®æ‡®Ç‡®ö\n‚Ä¢ PM ‡®´‡®∏‡®≤ ‡®¨‡©Ä‡®Æ‡®æ: ‡®ò‡©±‡®ü ‡®™‡©ç‡®∞‡©Ä‡®Æ‡©Ä‡®Ö‡®Æ ‡®§‡©á ‡®´‡®∏‡®≤ ‡®¨‡©Ä‡®Æ‡®æ\n‚Ä¢ ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®Æ‡®∏‡®º‡©Ä‡®®‡®∞‡©Ä: 50-80% ‡®∏‡®¨‡®∏‡®ø‡®°‡©Ä\n‚Ä¢ ‡®ï‡®ø‡®∏‡®æ‡®® ‡®ï‡©ç‡®∞‡©à‡®°‡®ø‡®ü ‡®ï‡®æ‡®∞‡®°: 4% ‡®¨‡®ø‡®Ü‡®ú ‡®¶‡®∞\n\n**‡®∞‡®æ‡®ú ‡®µ‡®ø‡®∏‡®º‡©á‡®∏‡®º ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç:**\n‚Ä¢ ‡®™‡©∞‡®ú‡®æ‡®¨: ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®¢‡®æ‡®Ç‡®ö‡®æ ‡®´‡©∞‡®° (3% ‡®¨‡®ø‡®Ü‡®ú)\n‚Ä¢ UP: ‡®Æ‡©Å‡®´‡®§ ‡®¨‡©Ä‡®ú ‡®µ‡©∞‡®° (‚Çπ4,000/‡®è‡®ï‡©ú)\n‚Ä¢ ‡®¨‡®ø‡®π‡®æ‡®∞: ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à ‡®∏‡®¨‡®∏‡®ø‡®°‡©Ä (75% ‡®§‡©±‡®ï)\n‚Ä¢ MP: ‡®ï‡©Ä‡®Æ‡®§ ‡®Ö‡©∞‡®§‡®∞ ‡®≠‡©Å‡®ó‡®§‡®æ‡®®\n\nüìã **‡®Ö‡®∞‡®ú‡©Ä ‡®™‡©ç‡®∞‡®ï‡®ø‡®∞‡®ø‡®Ü:** PM-KISAN ‡®™‡©ã‡®∞‡®ü‡®≤ ‡®ú‡®æ‡®Ç ‡®®‡®ú‡®º‡®¶‡©Ä‡®ï‡©Ä CSC ‡®ï‡©á‡®Ç‡®¶‡®∞ ‡®§‡©á ‡®ú‡®æ‡®ì‡•§",
        insurance: "üõ°Ô∏è **‡®´‡®∏‡®≤ ‡®¨‡©Ä‡®Æ‡®æ ‡®Ø‡©ã‡®ú‡®®‡®æ (2025):**\n\n**‡®™‡©ç‡®∞‡®ß‡®æ‡®® ‡®Æ‡©∞‡®§‡®∞‡©Ä ‡®´‡®∏‡®≤ ‡®¨‡©Ä‡®Æ‡®æ ‡®Ø‡©ã‡®ú‡®®‡®æ (PMFBY):**\n‚Ä¢ ‡®ñ‡®∞‡©Ä‡®´: ‡®∏‡®ø‡®∞‡®´ 2% ‡®™‡©ç‡®∞‡©Ä‡®Æ‡©Ä‡®Ö‡®Æ\n‚Ä¢ ‡®∞‡®¨‡©Ä: ‡®∏‡®ø‡®∞‡®´ 1.5% ‡®™‡©ç‡®∞‡©Ä‡®Æ‡©Ä‡®Ö‡®Æ\n‚Ä¢ ‡®∏‡®æ‡®≤‡®æ‡®®‡®æ/‡®¨‡®æ‡®ó‡®¨‡®æ‡®®‡©Ä: ‡®∏‡®ø‡®∞‡®´ 5% ‡®™‡©ç‡®∞‡©Ä‡®Æ‡©Ä‡®Ö‡®Æ\n\n**‡®ï‡®µ‡®∞‡©á‡®ú:**\n‚Ä¢ ‡®ï‡©Å‡®¶‡®∞‡®§‡©Ä ‡®Ü‡®™‡®¶‡®æ ‡®®‡®æ‡®≤ ‡®®‡©Å‡®ï‡®∏‡®æ‡®®\n‚Ä¢ ‡®ï‡©Ä‡©ú‡©á-‡®∞‡©ã‡®ó ‡®®‡®æ‡®≤ ‡®®‡©Å‡®ï‡®∏‡®æ‡®®\n‚Ä¢ ‡®Æ‡©å‡®∏‡®Æ ‡®¶‡®æ ‡®Æ‡®æ‡®∞\n‚Ä¢ ‡®´‡®∏‡®≤ ‡®µ‡©±‡®¢‡®£ ‡®§‡©ã‡®Ç ‡®¨‡®æ‡®Ö‡®¶ ‡®®‡©Å‡®ï‡®∏‡®æ‡®® (14 ‡®¶‡®ø‡®® ‡®§‡©±‡®ï)\n\n**‡®¶‡®æ‡®Ö‡®µ‡®æ ‡®™‡©ç‡®∞‡®ï‡®ø‡®∞‡®ø‡®Ü:**\n‚Ä¢ 72 ‡®ò‡©∞‡®ü‡®ø‡®Ü‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®∏‡©Ç‡®ö‡®®‡®æ ‡®¶‡®ø‡®ì (‡®ü‡©ã‡®≤ ‡®´‡©ç‡®∞‡©Ä: 14447)\n‚Ä¢ 'Crop Insurance' ‡®Æ‡©ã‡®¨‡®æ‡®à‡®≤ ‡®ê‡®™ ‡®∞‡®æ‡®π‡©Ä‡®Ç ‡®∞‡®ø‡®™‡©ã‡®∞‡®ü ‡®ï‡®∞‡©ã\n‚Ä¢ ‡®®‡©Å‡®ï‡®∏‡®æ‡®® ‡®¶‡®æ ‡®∏‡®∞‡®µ‡©á ‡®π‡©ã‡®µ‡©á‡®ó‡®æ\n‚Ä¢ 60 ‡®¶‡®ø‡®®‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®≠‡©Å‡®ó‡®§‡®æ‡®®\n\nüì± **‡®§‡©á‡®ú‡®º ‡®Ö‡®∞‡®ú‡©Ä:** pmfby.gov.in ‡®§‡©á ‡®î‡®®‡®≤‡®æ‡®à‡®® ‡®ï‡®∞‡©ã‡•§",
        soil: "üå± **‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä:**\n\n‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©á ‡®Æ‡©Å‡©±‡®ñ ‡®ï‡®ø‡®∏‡®Æ:\n‚Ä¢ **‡®¶‡©ã‡®Æ‡®ü ‡®Æ‡®ø‡©±‡®ü‡©Ä** - ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®≤‡®à ‡®∏‡®≠ ‡®§‡©ã‡®Ç ‡®µ‡®ß‡©Ä‡®Ü\n‚Ä¢ **‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä** - ‡®™‡®æ‡®£‡©Ä ‡®∞‡©±‡®ñ‡®£ ‡®µ‡®ø‡©±‡®ö ‡®ö‡©∞‡®ó‡©Ä\n‚Ä¢ **‡®∞‡©á‡®§‡®≤‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä** - ‡®™‡®æ‡®£‡©Ä ‡®®‡®ø‡®ï‡®æ‡®∏ ‡®ö‡©∞‡®ó‡©Ä\n\n‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®Ü‡®™‡®£‡®æ ‡®∏‡®•‡®æ‡®® ‡®¶‡©±‡®∏‡©ã ‡®§‡®æ‡®Ç ‡®ú‡©ã ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®®‡©Ç‡©∞ ‡®∏‡®•‡®æ‡®®‡®ï ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®µ‡®ø‡®∏‡®•‡®æ‡®∞ ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®¶‡©á ‡®∏‡®ï‡®æ‡®Ç‡•§",
        crops: "üåæ **‡®´‡®∏‡®≤‡®æ‡®Ç ‡®¶‡©Ä‡®Ü‡®Ç ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º‡®æ‡®Ç:**\n\n**‡®∞‡®¨‡©Ä ‡®´‡®∏‡®≤‡®æ‡®Ç (‡®Ö‡®ï‡®§‡©Ç‡®¨‡®∞-‡®Æ‡®æ‡®∞‡®ö):**\n‚Ä¢ ‡®ï‡®£‡®ï, ‡®ú‡©å‡®Ç, ‡®ö‡®®‡®æ, ‡®Æ‡®∏‡©Ç‡®∞, ‡®∏‡®∞‡©ç‡®π‡©ã‡®Ç\n\n**‡®ñ‡®∞‡©Ä‡®´ ‡®´‡®∏‡®≤‡®æ‡®Ç (‡®ú‡©Ç‡®®-‡®∏‡®§‡©∞‡®¨‡®∞):**\n‚Ä¢ ‡®ù‡©ã‡®®‡®æ, ‡®Æ‡©±‡®ï‡©Ä, ‡®ú‡©Å‡®Ü‡®∞, ‡®¨‡®ú‡®∞‡®æ, ‡®ï‡®™‡®æ‡®π\n\n**‡®ú‡®æ‡®á‡®¶ ‡®´‡®∏‡®≤‡®æ‡®Ç (‡®Æ‡®æ‡®∞‡®ö-‡®ú‡©Ç‡®®):**\n‚Ä¢ ‡®§‡®∞‡®¨‡©Ç‡®ú‡®º, ‡®ñ‡®∞‡®¨‡©Ç‡®ú‡®º‡®æ, ‡®ñ‡©Ä‡®∞‡®æ, ‡®≤‡©å‡®ï‡©Ä\n\n‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®Ö‡®§‡©á ‡®ñ‡©á‡®§‡®∞ ‡®Ö‡®®‡©Å‡®∏‡®æ‡®∞ ‡®∏‡®π‡©Ä ‡®∏‡©Å‡®ù‡®æ‡®µ‡®æ‡®Ç ‡®≤‡®à ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®Ü‡®™‡®£‡®æ ‡®∏‡®•‡®æ‡®® ‡®¶‡©±‡®∏‡©ã‡•§",
        default: "ü§ñ ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®Æ‡®¶‡®¶ ‡®ï‡®∞‡®®‡®æ ‡®ö‡®æ‡®π‡©Å‡©∞‡®¶‡®æ ‡®π‡®æ‡®Ç! ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Æ‡©à‡®®‡©Ç‡©∞ ‡®™‡©Å‡©±‡®õ ‡®∏‡®ï‡®¶‡©á ‡®π‡©ã:\n\n‚Ä¢ üå± ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä\n‚Ä¢ üåæ ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®¶‡©Ä‡®Ü‡®Ç ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º‡®æ‡®Ç\n‚Ä¢ üå§Ô∏è ‡®Æ‡©å‡®∏‡®Æ ‡®Ö‡®§‡©á ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä\n‚Ä¢ üß™ ‡®ñ‡®æ‡®¶ ‡®Ö‡®§‡©á ‡®â‡®∞‡®µ‡®∞‡®ï\n‚Ä¢ üêõ ‡®ï‡©Ä‡©ú‡©á ‡®Ö‡®§‡©á ‡®∞‡©ã‡®ó ‡®®‡®ø‡®Ø‡©∞‡®§‡®∞‡®£\n‚Ä¢ üí∞ ‡®Æ‡©∞‡®°‡©Ä ‡®¶‡©á ‡®≠‡®æ‡®µ\n‚Ä¢ üèõÔ∏è ‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®Ø‡©ã‡®ú‡®®‡®æ‡®µ‡®æ‡®Ç\n‚Ä¢ üõ°Ô∏è ‡®´‡®∏‡®≤ ‡®¨‡©Ä‡®Æ‡®æ\n\n‡®ï‡©Ä ‡®ú‡®æ‡®£‡®®‡®æ ‡®ö‡®æ‡®π‡©Å‡©∞‡®¶‡©á ‡®π‡©ã?"
      }
    };

    // Government schemes and subsidy queries
    if (message.includes('yojna') || message.includes('scheme') || message.includes('‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä') || message.includes('govt') || message.includes('‡®Ø‡©ã‡®ú‡®®‡®æ') || message.includes('‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä') || message.includes('subsidy') || message.includes('‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä')) {
      const langResponses = responses[chatLanguage as keyof typeof responses];
      if (message.includes('punjab') || message.includes('‡§™‡§Ç‡§ú‡§æ‡§¨') || message.includes('‡®™‡©∞‡®ú‡®æ‡®¨')) {
        return langResponses.schemes.punjab;
      }
      if (message.includes('bihar') || message.includes('‡§¨‡§ø‡§π‡§æ‡§∞') || message.includes('‡®¨‡®ø‡®π‡®æ‡®∞')) {
        return langResponses.schemes.bihar;
      }
      return langResponses.subsidy;
    }

    // Crop insurance queries
    if (message.includes('insurance') || message.includes('‡§¨‡•Ä‡§Æ‡§æ') || message.includes('‡®¨‡©Ä‡®Æ‡®æ') || message.includes('pmfby') || message.includes('crop insurance')) {
      return responses[chatLanguage as keyof typeof responses].insurance;
    }

    // Handle Hinglish queries
    const hinglishMessage = message.replace(/kya/g, '‡§ï‡•ç‡§Ø‡§æ').replace(/hai/g, '‡§π‡•à').replace(/kaise/g, '‡§ï‡•à‡§∏‡•á').replace(/farming/g, '‡§ñ‡•á‡§§‡•Ä').replace(/crop/g, '‡§´‡§∏‡§≤');
    
    // Location-based soil information
    const locationInfo = getLocationInfo(message) || getLocationInfo(hinglishMessage);
    if (locationInfo) {
      const locationResponses = {
        hi: `üìç **${locationInfo.district}, ${locationInfo.state} ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:**\n\nüå± **‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:** ${locationInfo.soilType}\n\nüìù **‡§µ‡§ø‡§µ‡§∞‡§£:** ${locationInfo.soilDescription}\n\nüåæ **‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤‡•á‡§Ç:** ${locationInfo.recommendedCrops.join(', ')}\n\nüí° **‡§∏‡•Å‡§ù‡§æ‡§µ:** ‡§á‡§∏ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§ö‡§ø‡§§ ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§`,
        en: `üìç **Soil Information for ${locationInfo.district}, ${locationInfo.state}:**\n\nüå± **Soil Type:** ${locationInfo.soilType}\n\nüìù **Description:** This soil type is suitable for various crops and has good fertility.\n\nüåæ **Recommended Crops:** ${locationInfo.recommendedCrops.join(', ')}\n\nüí° **Suggestion:** Use proper drainage and balanced fertilizers for farming in this soil.`,
        pa: `üìç **${locationInfo.district}, ${locationInfo.state} ‡®¶‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä:**\n\nüå± **‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡®æ ‡®ï‡®ø‡®∏‡®Æ:** ${locationInfo.soilType}\n\nüìù **‡®µ‡©á‡®∞‡®µ‡®æ:** ‡®á‡®π ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®≤‡®à ‡®ö‡©∞‡®ó‡©Ä ‡®Ö‡®§‡©á ‡®â‡®™‡®ú‡®æ‡®ä ‡®π‡©à‡•§\n\nüåæ **‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º‡©Ä ‡®´‡®∏‡®≤‡®æ‡®Ç:** ${locationInfo.recommendedCrops.join(', ')}\n\nüí° **‡®∏‡©Å‡®ù‡®æ‡®µ:** ‡®á‡®∏ ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®≤‡®à ‡®∏‡®π‡©Ä ‡®™‡®æ‡®£‡©Ä ‡®®‡®ø‡®ï‡®æ‡®∏ ‡®Ö‡®§‡©á ‡®∏‡©∞‡®§‡©Å‡®≤‡®ø‡®§ ‡®ñ‡®æ‡®¶ ‡®¶‡®æ ‡®µ‡®∞‡®§‡©ã‡®Ç ‡®ï‡®∞‡©ã‡•§`
      };
      return locationResponses[chatLanguage as keyof typeof locationResponses];
    }

    // Soil-related queries
    if (message.includes('‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä') || message.includes('soil') || message.includes('mitti') || message.includes('‡®Æ‡®ø‡©±‡®ü‡©Ä')) {
      return responses[chatLanguage as keyof typeof responses].soil;
    }

    // Crop-related queries
    if (message.includes('‡§´‡§∏‡§≤') || message.includes('crop') || message.includes('‡§ñ‡•á‡§§‡•Ä') || message.includes('‡®´‡®∏‡®≤') || message.includes('‡®ñ‡©á‡®§‡©Ä')) {
      return responses[chatLanguage as keyof typeof responses].crops;
    }

    // Default response
    return responses[chatLanguage as keyof typeof responses].default;
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage = inputValue.trim();
    setInputValue('');
    addUserMessage(userMessage);
    setIsLoading(true);

    // Simulate bot thinking time
    setTimeout(() => {
      const botResponse = generateBotResponse(userMessage);
      addBotMessage(botResponse);
      setIsLoading(false);
    }, 1000);
  };

  const handleVoiceInput = async () => {
    if (!("webkitSpeechRecognition" in window) && !("SpeechRecognition" in window)) {
      toast.error("‡§Ü‡§™‡§ï‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ Chrome ‡§Ø‡§æ Edge ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§");
      return;
    }

    if (isListening) {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      setIsListening(false);
      return;
    }

    try {
      // Request microphone permission explicitly
      await navigator.mediaDevices.getUserMedia({ audio: true });
    } catch (error) {
      toast.error("‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§");
      return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognitionRef.current = recognition;

    recognition.continuous = false;
    recognition.interimResults = false;
    
    // Add timeout for voice listening (3 seconds)
    const timeoutId = setTimeout(() => {
      if (isListening) {
        recognition.stop();
        setIsListening(false);
        toast.error("Voice listening timed out. Please try again.");
      }
    }, 3000);
    const languageMap = {
      'hi': 'hi-IN',
      'en': 'en-US', 
      'pa': 'pa-IN'
    };
    recognition.lang = languageMap[chatLanguage as keyof typeof languageMap] || 'hi-IN';

    recognition.onstart = () => {
      setIsListening(true);
      toast.success("‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç... ‡§¨‡•ã‡§≤‡•á‡§Ç");
    };

    recognition.onresult = (event) => {
      if (event.results.length > 0) {
        const transcript = event.results[0][0].transcript;
        setInputValue(transcript);
        // Auto-send the message after voice input
        setTimeout(() => {
          if (transcript.trim()) {
            const userMessage = transcript.trim();
            addUserMessage(userMessage);
            setIsLoading(true);
            setTimeout(() => {
              const botResponse = generateBotResponse(userMessage);
              addBotMessage(botResponse);
              setIsLoading(false);
            }, 1000);
          }
        }, 100);
      }
    };

    recognition.onerror = (event) => {
      console.error("Speech recognition error:", event.error);
      setIsListening(false);
      
      let errorMessage = "‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§";
      if (event.error === 'not-allowed') {
        errorMessage = "‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§";
      } else if (event.error === 'no-speech') {
        errorMessage = "‡§ï‡•ã‡§à ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡•Ä ‡§ó‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§";
      } else if (event.error === 'network') {
        errorMessage = "‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§";
      }
      
      toast.error(errorMessage);
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    try {
      recognition.start();
    } catch (error) {
      console.error("Failed to start speech recognition:", error);
      setIsListening(false);
      toast.error("‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§");
    }
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      toast.error("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•à‡§ß ‡§õ‡§µ‡§ø ‡§´‡§º‡§æ‡§á‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç");
      return;
    }

    addUserMessage(`üì∏ ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à: ${file.name}`);
    
    // Simulate image analysis
    setTimeout(() => {
      addBotMessage(`üì∏ **‡§õ‡§µ‡§ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ:**

‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§Ö‡§≠‡•Ä ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§ö‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§π‡•à‡•§

**‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ:**
‚Ä¢ ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§ï‡•Ä‡§ü/‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§π‡•à, ‡§§‡•ã ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç
‚Ä¢ ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡§ï‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç
‚Ä¢ ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡§ü‡•Ä‡§ï ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§õ‡§µ‡§ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç

üî¨ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§π‡§Æ AI-powered ‡§õ‡§µ‡§ø ‡§™‡§π‡§ö‡§æ‡§® ‡§≤‡•á‡§ï‡§∞ ‡§Ü‡§è‡§Ç‡§ó‡•á!`);
    }, 2000);
  };

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 h-14 w-14 rounded-full bg-gradient-primary shadow-agricultural hover:shadow-lg transition-all duration-300 z-50 group"
        size="icon"
      >
        <MessageCircle className="h-6 w-6 text-primary-foreground group-hover:scale-110 transition-transform" />
      </Button>
    );
  }

  return (
    <Card className="fixed bottom-6 right-6 w-96 h-[600px] shadow-agricultural z-50 bg-card/95 backdrop-blur-md border-border/60">
      <CardHeader className="flex flex-row items-center justify-between p-4 bg-gradient-primary text-primary-foreground rounded-t-lg">
        <CardTitle className="text-lg font-semibold flex items-center gap-2">
          <MessageCircle className="h-5 w-5" />
          {t.chatWithAI}
        </CardTitle>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setIsOpen(false)}
          className="h-8 w-8 text-primary-foreground hover:bg-white/20"
        >
          <X className="h-4 w-4" />
        </Button>
      </CardHeader>
      
      {/* Language Selector */}
      <div className="px-4 py-2 bg-card border-b border-border/20">
        <div className="flex items-center gap-2">
          <Languages className="h-4 w-4 text-muted-foreground" />
          <Select value={chatLanguage} onValueChange={setChatLanguage}>
            <SelectTrigger className="w-full bg-background border border-input shadow-sm z-50">
              <SelectValue placeholder="Select Language" />
            </SelectTrigger>
            <SelectContent className="bg-background border border-input shadow-lg z-[60]">
              <SelectItem value="hi" className="cursor-pointer hover:bg-accent">
                ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)
              </SelectItem>
              <SelectItem value="en" className="cursor-pointer hover:bg-accent">
                English
              </SelectItem>
              <SelectItem value="pa" className="cursor-pointer hover:bg-accent">
                ‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä (Punjabi)
              </SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      
      <CardContent className="p-0 flex flex-col h-[calc(100%-120px)]">
        <ScrollArea className="flex-1 p-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg whitespace-pre-wrap ${
                    message.sender === 'user'
                      ? 'bg-gradient-primary text-primary-foreground'
                      : 'bg-secondary text-secondary-foreground'
                  }`}
                >
                  {message.content}
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-secondary text-secondary-foreground p-3 rounded-lg">
                  <div className="flex space-x-2">
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>

        <div className="p-4 border-t bg-card/50 backdrop-blur-sm">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder={t.typeMessage}
              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
              className="flex-1"
              disabled={isLoading}
            />
            
            <Button
              variant="outline"
              size="icon"
              onClick={handleVoiceInput}
              className={`transition-colors ${isListening ? 'bg-destructive text-destructive-foreground' : ''}`}
              disabled={isLoading}
            >
              {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
            </Button>
            
            <Button
              variant="outline"
              size="icon"
              onClick={() => fileInputRef.current?.click()}
              disabled={isLoading}
            >
              <Upload className="h-4 w-4" />
            </Button>
            
            <Button
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isLoading}
              className="bg-gradient-primary"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
          
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            className="hidden"
          />
        </div>
      </CardContent>
    </Card>
  );
};