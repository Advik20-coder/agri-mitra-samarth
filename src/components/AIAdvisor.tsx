import { useState, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useLanguage } from "@/contexts/LanguageContext";
import { ArrowLeft, Mic, MicOff, MapPin, Wheat } from "lucide-react";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";

const stateData = {
  punjab: {
    name: "‡§™‡§Ç‡§ú‡§æ‡§¨ / Punjab",
    crops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§ï‡§™‡§æ‡§∏", "‡§ó‡§®‡•ç‡§®‡§æ", "‡§∏‡§∞‡§∏‡•ã‡§Ç", "‡§Ü‡§≤‡•Ç"],
    soilType: "Loamy Alluvial Soil (‡§ñ‡§æ‡§¶‡§∞ ‡§µ ‡§¨‡§æ‡§Ç‡§ó‡§∞)",
    description: "‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§§‡§É Alluvial Soil ‡§π‡•à ‡§ú‡•ã ‡§ï‡•É‡§∑‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§§‡•ç‡§Ø‡§Ç‡§§ ‡§â‡§™‡§ú‡§æ‡§ä ‡§π‡•à‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§ï‡•Ä ‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ó‡•á‡§π‡•Ç‡§Ç, ‡§ß‡§æ‡§® ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§π‡•à‡•§",
    districts: ["‡§≤‡•Å‡§ß‡§ø‡§Ø‡§æ‡§®‡§æ", "‡§Ö‡§Æ‡•É‡§§‡§∏‡§∞", "‡§ú‡§æ‡§≤‡§Ç‡§ß‡§∞", "‡§™‡§ü‡§ø‡§Ø‡§æ‡§≤‡§æ", "‡§¨‡§†‡§ø‡§Ç‡§°‡§æ", "‡§Æ‡•ã‡§ó‡§æ", "‡§∏‡§Ç‡§ó‡§∞‡•Ç‡§∞", "‡§´‡§∞‡•Ä‡§¶‡§ï‡•ã‡§ü"]
  },
  "uttar pradesh": {
    name: "‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂ / Uttar Pradesh", 
    crops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§ó‡§®‡•ç‡§®‡§æ", "‡§Ü‡§≤‡•Ç", "‡§ö‡§®‡§æ", "‡§Ö‡§∞‡§π‡§∞", "‡§∏‡§∞‡§∏‡•ã‡§Ç", "‡§ú‡•å"],
    soilType: "Mixed Alluvial Soil (‡§Æ‡§ø‡§∂‡•ç‡§∞‡§ø‡§§ ‡§ú‡§≤‡•ã‡§¢‡§º)",
    description: "UP ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§∏‡•á ‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§π‡•à‡•§ ‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ‡•Ä UP ‡§Æ‡•á‡§Ç ‡§â‡§™‡§ú‡§æ‡§ä ‡§ú‡§≤‡•ã‡§¢‡§º ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§π‡•à ‡§ú‡§¨‡§ï‡§ø ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§≠‡§æ‡§ó‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¶‡•ã‡§Æ‡§ü ‡§î‡§∞ ‡§ö‡§ø‡§ï‡§®‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§æ‡§à ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§",
    districts: ["‡§≤‡§ñ‡§®‡§ä", "‡§ï‡§æ‡§®‡§™‡•Å‡§∞", "‡§Ü‡§ó‡§∞‡§æ", "‡§Æ‡•á‡§∞‡§†", "‡§µ‡§æ‡§∞‡§æ‡§£‡§∏‡•Ä", "‡§™‡•ç‡§∞‡§Ø‡§æ‡§ó‡§∞‡§æ‡§ú", "‡§ó‡•ã‡§∞‡§ñ‡§™‡•Å‡§∞", "‡§Æ‡•Å‡§ú‡§´‡•ç‡§´‡§∞‡§®‡§ó‡§∞"]
  },
  bihar: {
    name: "‡§¨‡§ø‡§π‡§æ‡§∞ / Bihar",
    crops: ["‡§ß‡§æ‡§®", "‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§¶‡§≤‡§π‡§®", "‡§ú‡•Ç‡§ü", "‡§ó‡§®‡•ç‡§®‡§æ", "‡§Ü‡§≤‡•Ç", "‡§™‡•ç‡§Ø‡§æ‡§ú"],
    soilType: "Gangetic Alluvial Soil (‡§ó‡§Ç‡§ó‡§æ ‡§ï‡•Ä ‡§ú‡§≤‡•ã‡§¢‡§º)",
    description: "‡§¨‡§ø‡§π‡§æ‡§∞ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ó‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§â‡§∏‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§®‡§¶‡§ø‡§Ø‡•ã‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§≤‡§æ‡§à ‡§ó‡§à ‡§â‡§™‡§ú‡§æ‡§ä ‡§ú‡§≤‡•ã‡§¢‡§º ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§ß‡§æ‡§® ‡§î‡§∞ ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡•§",
    districts: ["‡§™‡§ü‡§®‡§æ", "‡§ó‡§Ø‡§æ", "‡§≠‡§æ‡§ó‡§≤‡§™‡•Å‡§∞", "‡§Æ‡•Å‡§ú‡§´‡•ç‡§´‡§∞‡§™‡•Å‡§∞", "‡§¶‡§∞‡§≠‡§Ç‡§ó‡§æ", "‡§™‡•Ç‡§∞‡•ç‡§£‡§ø‡§Ø‡§æ", "‡§∏‡§æ‡§∏‡§æ‡§∞‡§æ‡§Æ", "‡§¨‡•á‡§ó‡•Ç‡§∏‡§∞‡§æ‡§Ø"]
  },
  haryana: {
    name: "‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ / Haryana",
    crops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§¨‡§æ‡§ú‡§∞‡§æ", "‡§ú‡•ç‡§µ‡§æ‡§∞", "‡§ï‡§™‡§æ‡§∏", "‡§ó‡§®‡•ç‡§®‡§æ", "‡§∏‡§∞‡§∏‡•ã‡§Ç", "‡§ö‡§®‡§æ"],
    soilType: "Indo-Gangetic Alluvial Soil",
    description: "‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ ‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡§ø‡§Ç‡§ß‡•Å-‡§ó‡§Ç‡§ó‡§æ ‡§ï‡•á ‡§Æ‡•à‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§â‡§™‡§ú‡§æ‡§ä ‡§ú‡§≤‡•ã‡§¢‡§º ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§π‡§∞‡§ø‡§§ ‡§ï‡•ç‡§∞‡§æ‡§Ç‡§§‡§ø ‡§ï‡§æ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
    districts: ["‡§ó‡•Å‡§∞‡•Å‡§ó‡•ç‡§∞‡§æ‡§Æ", "‡§´‡§∞‡•Ä‡§¶‡§æ‡§¨‡§æ‡§¶", "‡§π‡§ø‡§∏‡§æ‡§∞", "‡§ï‡§∞‡§®‡§æ‡§≤", "‡§™‡§æ‡§®‡•Ä‡§™‡§§", "‡§Ö‡§Ç‡§¨‡§æ‡§≤‡§æ", "‡§Ø‡§Æ‡•Å‡§®‡§æ‡§®‡§ó‡§∞", "‡§∞‡•ã‡§π‡§§‡§ï"]
  },
  "madhya pradesh": {
    name: "‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂ / Madhya Pradesh",
    crops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§ú‡•ç‡§µ‡§æ‡§∞", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§ï‡§™‡§æ‡§∏", "‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®", "‡§ö‡§®‡§æ", "‡§§‡§ø‡§≤"],
    soilType: "Black Cotton Soil (‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä)",
    description: "MP ‡§Æ‡•á‡§Ç ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§§‡§É ‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä (‡§∞‡•á‡§ó‡•Å‡§°‡§º) ‡§™‡§æ‡§à ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§ï‡§™‡§æ‡§∏ ‡§î‡§∞ ‡§¶‡§≤‡§π‡§® ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§§‡§Æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§®‡§Æ‡•Ä ‡§ß‡§æ‡§∞‡§£ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§π‡•à‡•§",
    districts: ["‡§≠‡•ã‡§™‡§æ‡§≤", "‡§á‡§Ç‡§¶‡•å‡§∞", "‡§ú‡§¨‡§≤‡§™‡•Å‡§∞", "‡§ó‡•ç‡§µ‡§æ‡§≤‡§ø‡§Ø‡§∞", "‡§â‡§ú‡•ç‡§ú‡•à‡§®", "‡§∏‡§æ‡§ó‡§∞", "‡§∞‡§§‡§≤‡§æ‡§Æ", "‡§¶‡•á‡§µ‡§æ‡§∏"]
  }
};

export const AIAdvisor = () => {
  const [selectedState, setSelectedState] = useState('');
  const [stateInfo, setStateInfo] = useState<any>(null);
  const [isListening, setIsListening] = useState(false);
  const { t } = useLanguage();
  const navigate = useNavigate();
  const recognitionRef = useRef<any>(null);

  const handleVoiceInput = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      toast.error("Voice input not supported");
      return;
    }

    if (isListening) {
      recognitionRef.current?.stop();
      setIsListening(false);
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'hi-IN';

    recognition.onstart = () => {
      setIsListening(true);
      toast.success("‡§ï‡•å‡§® ‡§∏‡•á ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§∏‡•á ‡§π‡•à‡§Ç? ‡§¨‡•ã‡§≤‡•á‡§Ç...");
    };

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript.toLowerCase();
      
      // Match state from speech
      const matchedState = Object.keys(stateData).find(state => 
        transcript.includes(state) || 
        transcript.includes(stateData[state as keyof typeof stateData].name.toLowerCase())
      );
      
      if (matchedState) {
        setSelectedState(matchedState);
        setStateInfo(stateData[matchedState as keyof typeof stateData]);
      } else {
        toast.error("‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§™‡§π‡§ö‡§æ‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ó‡§Ø‡§æ, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç");
      }
      
      setIsListening(false);
    };

    recognition.onerror = () => {
      setIsListening(false);
      toast.error("Voice input error");
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognitionRef.current = recognition;
    recognition.start();
  };

  const handleStateChange = (state: string) => {
    setSelectedState(state);
    setStateInfo(stateData[state as keyof typeof stateData]);
  };

  return (
    <div className="min-h-screen bg-background p-4">
      <div className="container mx-auto max-w-4xl">
        <div className="flex items-center gap-4 mb-6">
          <Button
            variant="outline"
            onClick={() => navigate('/')}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            ‡§π‡•ã‡§Æ
          </Button>
          <h1 className="text-3xl font-bold bg-gradient-primary bg-clip-text text-transparent">
            ü§ñ AI Agriculture Advisor
          </h1>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* State Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="h-5 w-5" />
                ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleVoiceInput}
                  className={isListening ? "bg-red-100" : ""}
                >
                  {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <p className="text-sm text-muted-foreground">
                  ‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡•á ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§∏‡•á ‡§π‡•à‡§Ç? ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç:
                </p>
                
                <Select value={selectedState} onValueChange={handleStateChange}>
                  <SelectTrigger>
                    <SelectValue placeholder="‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç..." />
                  </SelectTrigger>
                  <SelectContent>
                    {Object.entries(stateData).map(([key, data]) => (
                      <SelectItem key={key} value={key}>
                        {data.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                {isListening && (
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="animate-pulse text-primary">
                      üé§ ‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç... ‡§Ö‡§™‡§®‡§æ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§¨‡§§‡§æ‡§è‡§Ç
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* State Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Wheat className="h-5 w-5" />
                ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
              </CardTitle>
            </CardHeader>
            <CardContent>
              {stateInfo ? (
                <div className="space-y-4">
                  <div>
                    <h3 className="font-semibold text-lg mb-2">üìç {stateInfo.name}</h3>
                    <p className="text-sm text-muted-foreground">{stateInfo.description}</p>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">üå± ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:</h4>
                    <p className="text-sm bg-muted p-3 rounded-lg">{stateInfo.soilType}</p>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">üåæ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§∏‡§≤‡•á‡§Ç:</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {stateInfo.crops.map((crop: string, index: number) => (
                        <div key={index} className="bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 px-3 py-2 rounded-lg text-sm text-center">
                          {crop}
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">üèòÔ∏è ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§ú‡§ø‡§≤‡•á:</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {stateInfo.districts.map((district: string, index: number) => (
                        <div key={index} className="bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 px-3 py-2 rounded-lg text-sm text-center">
                          {district}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <MapPin className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç</p>
                  <p className="text-sm mt-2">‡§Ü‡§™‡§ï‡•ã ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Detailed Information Cards */}
        {stateInfo && (
          <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20">
              <CardHeader>
                <CardTitle className="text-green-700 dark:text-green-300">üå± ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•Å‡§ù‡§æ‡§µ</CardTitle>
              </CardHeader>
              <CardContent className="text-sm">
                <ul className="space-y-2">
                  <li>‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç</li>
                  <li>‚Ä¢ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç</li>
                  <li>‚Ä¢ ‡§â‡§ö‡§ø‡§§ ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß ‡§ï‡§∞‡•á‡§Ç</li>
                  <li>‚Ä¢ ‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç</li>
                </ul>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20">
              <CardHeader>
                <CardTitle className="text-blue-700 dark:text-blue-300">üåæ ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ</CardTitle>
              </CardHeader>
              <CardContent className="text-sm">
                <ul className="space-y-2">
                  <li>‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¨‡•Ä‡§ú ‡§ö‡•Å‡§®‡•á‡§Ç</li>
                  <li>‚Ä¢ ‡§â‡§®‡•ç‡§®‡§§ ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç</li>
                  <li>‚Ä¢ ‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§¨‡•Å‡§Ü‡§à ‡§ï‡§∞‡•á‡§Ç</li>
                  <li>‚Ä¢ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§¶‡•á‡§Ç</li>
                </ul>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-amber-50 to-amber-100 dark:from-amber-900/20 dark:to-amber-800/20">
              <CardHeader>
                <CardTitle className="text-amber-700 dark:text-amber-300">üí° ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ</CardTitle>
              </CardHeader>
              <CardContent className="text-sm">
                <ul className="space-y-2">
                  <li>‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç</li>
                  <li>‚Ä¢ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç</li>  
                  <li>‚Ä¢ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç</li>
                  <li>‚Ä¢ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§≤‡§æ‡§≠ ‡§â‡§†‡§æ‡§è‡§Ç</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};